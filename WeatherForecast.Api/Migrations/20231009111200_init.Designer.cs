// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WeatherForecast.Infrastructure;

#nullable disable

namespace WeatherForecast.Api.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20231009111200_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WeatherForecast.Domain.Aggregates.ForecastWeather.ForecastWeather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AtmospherePressure")
                        .HasColumnType("integer");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CloudBaseInMeters")
                        .HasColumnType("integer");

                    b.Property<int>("CloudinessInPercent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateWeatherEvent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DewPoint")
                        .HasColumnType("double precision");

                    b.Property<int>("HorizontalVisibilityInKilometer")
                        .HasColumnType("integer");

                    b.Property<int>("HumidityInPercent")
                        .HasColumnType("integer");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WeatherEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ForecastsWeather");
                });

            modelBuilder.Entity("WeatherForecast.Domain.Aggregates.ForecastWeather.ForecastWeather", b =>
                {
                    b.OwnsOne("WeatherForecast.Domain.Aggregates.WeatherForecast.Values.Wind", "Wind", b1 =>
                        {
                            b1.Property<Guid>("ForecastWeatherId")
                                .HasColumnType("uuid");

                            b1.Property<int>("DirectionFirst")
                                .HasColumnType("integer");

                            b1.Property<int>("DirectionSecond")
                                .HasColumnType("integer");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<double>("SpeedWindInMetersPerSecond")
                                .HasColumnType("double precision");

                            b1.HasKey("ForecastWeatherId");

                            b1.ToTable("ForecastsWeather");

                            b1.WithOwner()
                                .HasForeignKey("ForecastWeatherId");
                        });

                    b.Navigation("Wind")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
